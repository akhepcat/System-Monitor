#!/bin/bash

# betterspeedtest.sh - Script to simulate http://speedtest.net
# Start pinging, then initiate a download, let it finish, then start an upload
# Output the measured transfer rates and the resulting ping latency
# It's better than 'speedtest.net' because it measures latency *while* measuring the speed.

#
#  hacked up for plugapps by Leif Sawyer.  Sorry, Rich.
#

# Copyright (c) 2014 - Rich Brown rich.brown@blueberryhillsoftware.com
# GPLv2

# read the options
# “H” and “host” DNS or IP address of the netperf server host (default: netperf.bufferbloat.net)
# “t” and “time” Time to run the test in each direction (default: 60 seconds)
# “p” and “ping” Host to ping for latency measurements (default: gstatic.com)
# "n" and "number" Number of simultaneous upload or download sessions (default: 5 sessions;
#       5 sessions chosen empirically because total didn't increase much after that number)

usage() {
        echo "Usage: sh betterspeedtest.sh [-4 -6] [-qvbkUDHPtpn]"
        echo ""
        echo "-q|--quiet"
        echo "-v|--verbose"
        echo "-b|--bandwidth(-only)"
        echo "-U|--upload(-only)"
        echo "-D|--download(-only)"
        echo "-k|--kilobits                        default: megabits/s"
        echo "-H|--host netperf-server             default: $TESTHOST"
        echo "-P|--port server-port                default: $PERFPORT"
        echo "-t|--time duration                   default: $TESTDUR"
        echo "-p|--ping host-to-ping               default: $PINGHOST"
        echo "-n|--number  simultaneous-sessions   default: $MAXSESSIONS"
        exit 1
}

# Summarize the contents of the ping's output file to show min, avg, median, max, etc.
# 	input parameter ($1) file contains the output of the ping command

summarize_pings() {			
	
	# Process the ping times, and summarize the results
	# grep to keep lines that have "time=", then sed to isolate the time stamps, and sort them
	# awk builds an array of those values, and prints first & last (which are min, max) 
	#	and computes average.
	# If the number of samples is >= 10, also computes median, and 10th and 90th percentile readings
	sed 's/^.*time=\([^ ]*\) ms/\1/' < $1 | grep -v "PING" | sort -n | \
	awk 'BEGIN {numdrops=0; numrows=0;} \
		{ \
			if ( $0 ~ /timeout/ ) { \
			   	numdrops += 1; \
			} else { \
				numrows += 1; \
				arr[numrows]=$1; sum+=$1; \
			} \
		} \
		END { \
			pc10="-"; pc90="-"; med="-"; \
			if (numrows == 0) {numrows=1} \
			if (numrows>=10) \
			{ 	ix=int(numrows/10); pc10=arr[ix]; ix=int(numrows*9/10);pc90=arr[ix]; \
				if (numrows%2==1) med=arr[(numrows+1)/2]; else med=(arr[numrows/2]); \
			}; \
			pktloss = numdrops/(numdrops+numrows) * 100; \
			printf("  Latency: (in msec, %d pings, %4.2f%% packet loss)\n      Min: %4.3f \n    10pct: %4.3f \n   Median: %4.3f \n      Avg: %4.3f \n    90pct: %4.3f \n      Max: %4.3f\n", numrows, pktloss, arr[1], pc10, med, sum/numrows, pc90, arr[numrows] )\
		 }'
}

# Print a line of dots as a progress indicator.

print_dots() {
	while : ; do
		printf "."
		sleep 1s
	done
}

# Stop the current print_dots() process

kill_dots() {
	# echo "Pings: $ping_pid Dots: $dots_pid"
	kill -9 $dots_pid
	wait $dots_pid 2>/dev/null
	dots_pid=0
}

# Stop the current ping process

kill_pings() {
	# echo "Pings: $ping_pid Dots: $dots_pid"
	kill -9 $ping_pid 
	wait $ping_pid 2>/dev/null
	ping_pid=0
}

# Stop the current pings and dots, and exit
# ping command catches (and handles) first Ctrl-C, so you have to hit it again...
kill_pings_and_dots_and_exit() {
	if [ $PROGRESS -gt 0 ]; then
		kill_dots
	fi
	kill_pings
	for i in `pgrep netperf`		# gets a list of PIDs for processes named 'netperf'
	do
		kill -9 $i
	done
	echo "\nStopped"
	exit 1
}

# ------------ Measure speed and ping latency for one direction ----------------
#
# Called with measure_direction "Download" $TESTHOST $TESTDUR $PINGHOST

measure_direction() {

	# Create temp files
	SPEEDFILE=`mktemp /tmp/netperfUL.XXXXXX` || exit 1

	if [ $BWONLY -eq 0 ]; then
		PINGFILE=`mktemp /tmp/measurepings.XXXXXX` || exit 1

		# Start dots
		if [ $PROGRESS -gt 0 ]; then
			print_dots &
			dots_pid=$!
			# echo "Dots PID: $dots_pid"
		fi

		# Start Ping
		if [ $TESTPROTO -eq "-4" ]
		then
			ping $4 > $PINGFILE &
		else
			ping6 $4 > $PINGFILE &
		fi
		ping_pid=$!
		# echo "Ping PID: $ping_pid"
	fi

	# Start netperf with the proper direction
	if [ $1 == "Download" ]; then
		dir="TCP_MAERTS"
	else
		dir="TCP_STREAM"
	fi
	

	# Start $MAXSESSIONS datastreams between netperf client and the netperf server
	# netperf writes the sole output value (in Mbps) to stdout when completed
	for i in $( seq $MAXSESSIONS )
	do
		netperf -p $PERFPORT $TESTPROTO $SCALE -H $TESTHOST -t $dir -l $TESTDUR -v 0 -P 0 >> $SPEEDFILE &
		#echo "Starting $!"
	done
	
	# Wait until each of the background netperf processes completes 
	for i in `pgrep netperf`		# gets a list of PIDs for processes named 'netperf'
	do
		#echo "Waiting for $i"
		wait $i
	done

	# Print TCP Download speed
	if [ $QUIET -eq 0 ]; then
		echo ""
	fi
	SBITS=${SCALE//b\/s/}
	SBITS="${SBITS//-f /}b/s"
	
	echo " $1: " `awk '{s+=$1} END { printf("%.0f\n", s) }' $SPEEDFILE` $SBITS

	if [ $BWONLY -eq 0 ]; then
		# When netperf completes, stop the dots and the pings
		kill_pings
		if [ $PROGRESS -gt 0 ]; then
			kill_dots
		fi

		# Summarize the ping data
		summarize_pings $PINGFILE

		rm $PINGFILE
	fi
	rm $SPEEDFILE
}

# ------- Start of the main routine --------

# set an initial values for defaults
TESTHOST="plugbase.gci.net"
TESTDUR="30"
PINGHOST="sagolas.gci.net"
MAXSESSIONS="20"
TESTPROTO=-4
PERFPORT=12865
# default to all tests
BWONLY=0
DOWNLOAD=1
UPLOAD=1
# default to progress bars
QUIET=0
PROGRESS=1
SCALE="-f m"	# default to megabits/sec

# extract options and their arguments into variables.
while [ $# -gt 0 ] 
do
    case "$1" in
	    -4|-6) TESTPROTO=$1 ; shift 1 ;;
            -v|--verbose) PROGRESS=1 ; QUIET=0; shift 1 ;;
            -q|--quiet)  PROGRESS=0 ; QUIET=1; shift 1 ;;
            -b|--bandwidth*) BWONLY=1 ; shift 1 ;;
            -U|--upload*) DOWNLOAD=0 ; shift 1 ;;
            -D|--download*) UPLOAD=0 ; shift 1 ;;
            -k|--kilobits) SCALE="-f k" ; shift 1 ;;
        -H|--host)
            case "$2" in
                "") echo "Missing hostname" ; exit 1 ;;
                *) TESTHOST=$2 ; shift 2 ;;
            esac ;;
        -t|--time) 
        	case "$2" in
        		"") echo "Missing duration" ; exit 1 ;;
                *) TESTDUR=$2 ; shift 2 ;;
            esac ;;
        -p|--ping)
            case "$2" in
                "") echo "Missing ping host" ; exit 1 ;;
                *) PINGHOST=$2 ; shift 2 ;;
            esac ;;
        -P|--port)
            case "$2" in
                "") echo "Missing port number" ; exit 1 ;;
                *) PERFPORT=$2 ; shift 2 ;;
            esac ;;
        -n|--number)
        	case "$2" in
        		"") echo "Missing number of simultaneous sessions" ; exit 1 ;;
        		*) MAXSESSIONS=$2 ; shift 2 ;;
        	esac ;;
        --) shift ; break ;;
        *) usage ;;
    esac
done

# Start the main test

if [ $TESTPROTO -eq "-4" ]
then
	PROTO="ipv4"
else
	PROTO="ipv6"
fi
DATE=`date "+%Y-%m-%d %H:%M:%S"`
if [ $DOWNLOAD -eq 1 -a $UPLOAD -eq -1 ]; then
	DUR="($TESTDUR seconds in each direction)"
elif [ $DOWNLOAD -eq 1 -a $UPLOAD -eq 0 ]; then
	DUR="($TESTDUR seconds downloading)"
elif [ $DOWNLOAD -eq 0 -a $UPLOAD -eq 1 ]; then
	DUR="($TESTDUR seconds uploading)"
elif [ $DOWNLOAD -eq 0 -a $UPLOAD -eq 0 -a $BWONLY -eq 1 ]; then
	echo "no tests selected"
	exit 1
else
	DUR="($TESTDUR seconds)"
fi

if [ $BWONLY -eq 0 ]; then
	PINGU="while pinging $PINGHOST"
fi

if [ $QUIET -eq 0 ]; then
	echo "$DATE Testing against $TESTHOST ($PROTO) with $MAXSESSIONS simultaneous sessions $PINGU $DUR"
fi

# Catch a Ctl-C and stop the pinging and the print_dots
trap kill_pings_and_dots_and_exit SIGINT SIGTERM SIGKILL SIGQUIT SIGABRT SIGSTOP SIGSEGV

if [ $DOWNLOAD -eq 1 ]; then
	measure_direction "Download" $TESTHOST $TESTDUR $PINGHOST $MAXSESSIONS
fi

if [ $UPLOAD -eq 1 ]; then
	measure_direction "  Upload" $TESTHOST $TESTDUR $PINGHOST $MAXSESSIONS
fi

