#!/bin/bash

RRDLIB=/srv/rrds
WEBROOT=/srv/http/sitestats
PROGS="uptime.sh load.sh memory.sh eth0.sh speedtest.sh fping.sh webpage.sh" #webspeed.sh #sitestats.sh sda1.sh
PINGS="8.8.8.8 9.9.9.9"

[[ -r "/etc/default/sysmon.conf" ]] && source /etc/default/sysmon.conf

export PATH=$PATH:/sbin:/usr/sbin:${SCRIPTHOME}
export RRDLIB
export WEBROOT

HOUR=$(date +"%-H")	# we don't want zero-padded
MIN=$(date +"%-M")	# ^^^
TS=$(( ($HOUR * 3600) + ($MIN * 60) ))
CMD=$1
[[ ${TIMING:-0} -eq 1 ]] && tStart=$(date '+%s.%N')

usage () {
	echo "$0 (debug|create|force-create|reindex|update|graph|auto)"
	echo ""
	echo "           auto - automatically update, rebuild, and graph everything"
	echo ""
	echo "         create - create any RRD files that don't currently exist"
	echo "   force-create - forcibly create all RRD files, overwriting existing ones"
	echo "         update - poll all targets and update all RRD files"
	echo "          debug - shows what env variables will be passed, along with"
	echo "                  all generated pathnames and filenames"
	echo ""
	echo "        reindex - rebuild the daily 'index.html' for current configuration"
	echo " reindex-weekly - rebuild just the 'weekly.html' index file"
	echo "reindex-monthly - rebuild just the 'monthly.html' index file"
	echo " reindex-yearly - rebuild just the 'yearly.html' index file"
	echo ""
	echo "          graph - generate the daily graph files"
	echo "   graph-weekly - generate the weekly graph files"
	echo "  graph-monthly - generate the monthly graph files"
	echo "   graph-yearly - generate the yearly graph files"
}

html_head() {
	if [ -z "${1}" ]
	then
		echo "error, INDEX variable is empty!"
		exit 1
	fi

	cat >${1} <<EOF
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta http-equiv="Refresh" content="300" />
		<meta http-equiv="Pragma" content="no-cache" />
		<meta http-equiv="Cache-Control" content="no-cache" />
		<link rel="shortcut icon" href="favicon.ico" />
		<title> Real time Statistics </title>
	</head>
<body>
<p>
	I provide multiple statistics showing the general health of this server.<br />
	All statistics are gathered once a minute and the charts are redrawn every 5 minutes.
	Additionally, this page is automatically reloaded every 5 minutes.<br />
</p>
EOF

}

html_tail() {
	if [ -z "${1}" ]
	then
		echo "error, INDEX variable is empty!"
		exit 1
	fi

	cat >>${1} <<EOF
<hr />
<p> (c) akhepcat - <a href="https://github.com/akhepcat/System-Monitor">System-Monitor Suite</a> on Github!</p>
</body>
</html>
EOF
}


reindex() {
	# DWMY={day,week,month,year}
	DWMY=$1
	if [ -z "${DWMY}" ]
	then
		echo "error, DWMY variable is empty!"
		exit 1
	fi

	if [ "${DWMY}" = "day" ]
	then
		IDX=${WEBROOT}/index.html
		html_head "${IDX}"

		echo "<p><center>" >>${IDX}
		# menu header
		for HF in $(find "${WEBROOT}" -maxdepth 1 -type f -iname '*.html' | sed "s^.*${WEBROOT}/^^g; s/\.html//g;" | sort -f) ;
		do
				if [ "${HF}" != "index" -a "${HF}" != "weekly" -a "${HF}" != "monthly" -a "${HF}" != "yearly" -a -n "${HF##*response-*}" ]
			then
				echo "<a href=\"${HF}.html\">${HF}</a>&nbsp;&nbsp;&nbsp;" >> ${IDX}
			fi
		done
		echo "<br /><br />" >>${IDX}
	else
		IDX="${WEBROOT}/${DWMY}ly.html"
		html_head "${IDX}"
		echo "<p><center>" >>${IDX}
	fi

	if [ -r ${WEBROOT}/index.html -a "${DWMY}" != "day" ]
	then
		echo "&nbsp;&nbsp;&nbsp;<a href=\"index.html\">Stats roundup</a>&nbsp;&nbsp;&nbsp;" >>${IDX}
	fi
	if [ -r ${WEBROOT}/weekly.html -a "${DWMY}" != "week" ]
	then
		echo "&nbsp;&nbsp;&nbsp;<a href=\"weekly.html\">Weekly stats roundup</a>&nbsp;&nbsp;&nbsp;" >>${IDX}
	fi
	if [ -r ${WEBROOT}/monthly.html -a "${DWMY}" != "month"  ]
	then
		echo "&nbsp;&nbsp;&nbsp;<a href=\"monthly.html\">Monthly stats roundup</a>&nbsp;&nbsp;&nbsp;" >>${IDX}
	fi
	if [ -r ${WEBROOT}/yearly.html -a "${DWMY}" != "year" ]
	then
		echo "&nbsp;&nbsp;&nbsp;<a href=\"yearly.html\">Yearly stats roundup</a>&nbsp;&nbsp;&nbsp;" >>${IDX}
	fi
	echo "</center></p><hr>" >>${IDX}

	if [ "${DWMY}" != "day" ]
	then
		DWMY="-${DWMY}"
	else
		DWMY=""
	fi
	for i in ${PROGS}
	do
		if [ -z "${i##*load*}" ]
		then
			GRAPHS=$($i debug | grep GRAPHNAME)
			VAR=${i%%.*}
			GRAPH1=$(echo ${GRAPHS} | cut -f2 -d= | awk '{print $1}')
			GRAPH2=$(echo ${GRAPHS} | cut -f3 -d= | awk '{print $1}')
			GRAPH1=${GRAPH1##*/}
			GRAPH2=${GRAPH2##*/}
			GRAPH1=${GRAPH1//.png/$DWMY.png}
			GRAPH2=${GRAPH2//.png/$DWMY.png}
			if [ -n "${GRAPH1}" ]
			then
				echo "<h3>${VAR}</h3>" >> ${IDX}
				echo "<p> <img src=\"${GRAPH1}\" alt="${GRAPH1}" /> </p>" >> ${IDX}
				echo "<br />" >> ${IDX}
				echo "<h3>${VAR}</h3>" >> ${IDX}
				echo "<p> <img src=\"${GRAPH2}\" alt="${GRAPH2}" /> </p>" >> ${IDX}
			fi
		
		elif [ -z "${i##*sitestats*}" ]
		then
			echo "<h3>Other System Stats</h3>" >> ${IDX}
			$i graph >> ${IDX}

		elif [ -z "${i##*fping*}" ]
		then
			if [ -z "${PINGS}" ];
			then
				echo "Need IP for fping, add to PINGS variable"
				exit 1
			fi
			for IP in ${PINGS}
			do
				GRAPHNAME=$($i debug ${IP} | grep GRAPHNAME | cut -f 2 -d= )
				if [ -n "${GRAPHNAME}" ]
				then
					VAR=${i%%.*}
					URI=${GRAPHNAME%%.png}.html
					if [ -r "${URI}" ]
					then
						URI=${URI##*/}
						echo "<h3><span style='display:inline-block;'><big>${VAR}</big> - <a href='${URI}'>${IP}</a></span></h3>" >> ${IDX}
					else
						echo "<h3><span style='display:inline-block;'><big>${VAR}</big> - ${IP}</span></h3>" >> ${IDX}
					fi
					GRAPHNAME=${GRAPHNAME##*/}
		 			GRAPHNAME=${GRAPHNAME//.png/$DWMY.png}
		 			echo "<p> <img src=\"${GRAPHNAME}\" alt="${GRAPHNAME}" /> </p>" >> ${IDX}
					echo "<br />" >> ${IDX}
				fi
			done
		elif [ -z "${i##*webpage*}" ]
		then
			GRAPHNAMES=$($i debug ${IP} | grep GRAPHNAME | cut -f 2 -d= )
			for GRAPHNAME in ${GRAPHNAMES}
			do
				if [ -n "${GRAPHNAME}" ]
				then
					VAR=${i%%.*}
					echo "<h3>${VAR}</h3>" >> ${IDX}
					GRAPHNAME=${GRAPHNAME##*/}
					GRAPHNAME=${GRAPHNAME//.png/$DWMY.png}
					echo "<p> <img src=\"${GRAPHNAME}\" alt="${GRAPHNAME}" /> </p>" >> ${IDX}
					echo "<br />" >> ${IDX}
				fi
			done
		else
			GRAPHNAME=$($i debug | grep GRAPHNAME | cut -f 2 -d= )
			if [ -n "${GRAPHNAME}" ]
			then
				VAR=${i%%.*}
				echo "<h3>${VAR}</h3>" >> ${IDX}
				GRAPHNAME=${GRAPHNAME##*/}
				GRAPHNAME=${GRAPHNAME//.png/$DWMY.png}
				echo "<p> <img src=\"${GRAPHNAME}\" alt="${GRAPHNAME}" /> </p>" >> ${IDX}
				echo "<br />" >> ${IDX}
			fi
		fi
	done

	html_tail "${IDX}"
}

do_updates()
{
	for i in ${PROGS}; 
	do
		if [ -z "${i##*fping*}" ]
		then
			for IP in ${PINGS}
			do
				${i} update ${IP} >/dev/null 2>&1
			done
		else
			${i} update >/dev/null 2>&1
		fi
	done
}

do_debugs()
{
	for i in ${PROGS}; 
	do
		if [ -z "${i##*fping*}" ]
		then
			for IP in ${PINGS}
			do
				${i} debug ${IP}
			done
		else
			${i} debug
		fi
		echo "---"
	done
}

do_create()
{
	if [ "${1}" == "force" ]
	then
	echo "Warning, this will erase any existing RRD databases"
	echo "press ctrl-c now, or wait 10 seconds...."
	sleep 10

	fi
		
	for i in ${PROGS}; 
	do
		if [ -z "${i##*fping*}" ]
		then
			for IP in ${PINGS}
			do
				${i} create ${IP} >/dev/null 2>&1
			done
		else
			${i} create >/dev/null 2>&1
		fi
	done
}

do_graphs()
{
	if [ -n "${1}" ]
	then
		RANGE="-${1}"
	else
		RANGE=""
	fi

	for i in ${PROGS}; 
	do
		if [ -z "${i##*fping*}" ]
		then
			for IP in ${PINGS}
			do
				${i} graph${RANGE} ${IP} >/dev/null 2>&1
			done
		else
			${i} graph${RANGE} >/dev/null 2>&1
		fi
	done
}

do_auto()
{
	# Flow through, because we want a maximum of everything to happen!

	#Every minute (crontab calls us no more than once a minute anyway)
	do_updates

	#TS is in seconds, so 5 minutes is 300s
	if [ 0 -eq $((TS % 300)) ]
	then
		do_graphs
	fi
	
	#...10 minutes is 300s
	if [ 0 -eq $((TS % 600)) ]
	then
		do_graphs weekly
	fi
	
	#...60 minutes is 3600s
	if [ 0 -eq $((TS % 3600)) ]
	then
		do_graphs monthly
	fi

	#...240 minutes is 14400s
	if [ 0 -eq $((TS % 14400)) ]
	then
		do_graphs yearly
	fi

	if [ 0 -eq $((TS % 86400)) ]
	then
		reindex year
		reindex month
		reindex week
		reindex day
	fi


}

check_prereqs() {

	if [ -z "$(command -v rrdtool)" ];
	then
		REQS="${REQS:+$REQS }rrdtool"
	fi
	if [ -z "$(command -v ifconfig)" ];
	then
		REQS="net-tools(ifconfig)"
	fi
	if [ -z "$(command -v wget)" ];
	then
		REQS="${REQS:+$REQS }wget"
	fi
	if [ -z "$(command -v pbmtext)" ];
	then
		REQS="${REQS:+$REQS }netpbm"
	fi

	if [ -z "$(command -v fping)" ];
	then
		REQS="${REQS:+$REQS }fping"
	fi

	if [ -n "${REQS}" ]
	then
		echo "Couldn't find these prerequisites:"
		echo "        ${REQS}"
		echo ""
		echo "install them using your favorite package manager before continuing"
		echo ""
		exit 1
	fi
}

###########################################
#  Main program

if [ -z "${PROGS##*fping*}" ]
then
	if [ -z "${PINGS}" ];
	then
		echo "Need IP for fping, add to PINGS variable"
		exit 1
	fi
fi

check_prereqs

case $CMD in
	(debug) do_debugs
		;;
	(force-create) do_create force
		;;
	(create) do_create
		;;
	(update) do_updates
		;;
	(graph) do_graphs
		;;
	(graph-weekly) do_graphs weekly
		;;
	(graph-monthly) do_graphs monthly
		;;
	(graph-yearly) do_graphs yearly
		;;
	(reindex) reindex day
		;;
	(reindex-weekly) reindex week
		;;
	(reindex-monthly) reindex month
		;;
	(reindex-yearly) reindex year
		;;
	(auto) do_auto
		;;
	(*) usage
		exit 1
		;;
esac

if [ ${TIMING:-0} -eq 1 ]
then
	tStop=$(date '+%s.%N')
	echo "$tStop - $tStart" | bc > /tmp/do-updates.run
fi
